name: Process New Markdown Files

on:
  push:
    branches:
      - main
    paths:
      - 'content/**/*.md'
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'content/**/*.md'

jobs:
  check-and-process:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new markdown files
        id: check-files
        run: |
          # Get all changed .md files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep '\.md$' || true)
          
          # Debug output
          echo "Changed markdown files:"
          echo "$CHANGED_FILES"
          
          # Initialize flag and array for truly new files
          NEEDS_PROCESSING=false
          NEW_FILES=()
          
          # Check each changed .md file
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              # Convert path from content/blog/post.md to content/processed/blog/post.json
              JSON_PATH=$(echo "$file" | sed 's/\.md$/.json/' | sed 's|content/|content/processed/|')
              
              # Debug output
              echo "Checking for: $JSON_PATH"
              
              # Check if JSON exists and is older than MD file
              if [ ! -f "$JSON_PATH" ] || [ "$file" -nt "$JSON_PATH" ]; then
                echo "File needs processing: $file"
                NEEDS_PROCESSING=true
                NEW_FILES+=("$file")
              else
                echo "JSON exists and is up to date: $JSON_PATH"
              fi
            fi
          done <<< "$CHANGED_FILES"
          
          # Set outputs
          echo "needs_processing=$NEEDS_PROCESSING" >> $GITHUB_OUTPUT
          echo "new_files=${NEW_FILES[*]}" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        if: steps.check-files.outputs.needs_processing == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        if: steps.check-files.outputs.needs_processing == 'true'
        run: yarn install

      - name: Process Markdown
        if: steps.check-files.outputs.needs_processing == 'true'
        run: node scripts/processMarkdown.mjs
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
          CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

      - name: Commit and push if changes exist
        if: steps.check-files.outputs.needs_processing == 'true'
        run: |
          # Pull latest changes to avoid conflicts
          git pull origin main --rebase

          # Stage only the processed JSON files
          for file in ${{ steps.check-files.outputs.new_files }}; do
            JSON_PATH=$(echo "$file" | sed 's/\.md$/.json/' | sed 's|content/|content/processed/|')
            git add "$JSON_PATH"
          done
          git add cache/content-hash-cache.json

          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git config --global user.name "GitHub Action"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: process new markdown files [skip ci]"
            
            # Try to push, if it fails due to conflicts, abort
            if ! git push origin main; then
              echo "Push failed, likely due to conflicts. Aborting."
              exit 0
            fi
          fi
