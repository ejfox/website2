{
  "content": "<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I’ve been really enjoying using Vue as a framework for my javascript applications. It allows me to quickly and easily lay out my data structure, some DOM-elements that are controlled by data, and handle any interactions / application state stuff I might need.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">In years past, my development workflow usually started with me cloning my <a href=\"https://github.com/ejfox/starter\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">@ejfox/starter</a> project, which has gulp, webpack, and a handful of other useful frameworks for making things quickly already set up.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Now, since it’s upgrade to 3.0, I pretty much exclusively use</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">> vue create project-name</code> which gives you a little CLI wizard to create a new Vue project. Importantly, you can manually select the features you want and create your own project defaults.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Mine, for example, automatically pulls in the Router, Vuex, Linter, and Stylus.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I <a href=\"https://www.youtube.com/watch?v=Q6e4pQccMH4\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">recorded a video of myself spinning up a prototype</a> of a D3 force layout using the techniques I describe below, it’s around 90 minutes but you can tell YouTube to play it double-speed and click around - if you’re curious.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"pulling-in-data\">Pulling in data</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">In my old starter project, I would pull in data with <a href=\"https://github.com/ejfox/starter/blob/master/src/coffee/app.coffee#L19\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">d3.queue</a> which was super easy and very little code.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">With Vue as my default framework, I’ve moved over to using the <a href=\"https://vuejs.org/v2/cookbook/using-axios-to-consume-apis.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">pattern of using axios to update objects in the component’s data</a> which is also super easy and very little code. Check out <a href=\"https://github.com/ejfox/website/blob/master/pages/vibes.vue#L42\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">this super-simple example of axios+vue</a> which powers <a href=\"https://ejfox.com/vibes\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">ejfox.com/vibes</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">When I’m pulling data from an API, it’s as simple as setting up the keys, building the API call, looking at the returned data in the Vue Chrome Devtools Inspector, and then building out the DOM elements with Vue’s <a href=\"https://vuejs.org/v2/guide/list.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">v-if and v-for</a> directives.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"combining-vue-and-d3-for-dataviz\">Combining Vue and D3 for dataviz</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Part of the reason that I really like using Vue is that it meshes with my understanding of D3, which I use to create a majority of my data visualization work both personally and professionally.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Vue makes it so that we no longer need our old, trusty friend <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">d3.select().enter().append().exit()</code> to bind data to various DOM elements, since Vue is doing it for us.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Before Vue, I would have an SVG already on the page and do something like</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"js\" data-theme=\"\"><code data-language=\"js\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FFAD66\">const</span><span style=\"color:#CCCAC2\"> svg </span><span style=\"color:#F29E74\">=</span><span style=\"color:#CCCAC2\"> d3</span><span style=\"color:#F29E74\">.</span><span style=\"color:#FFD173\">select</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"svg\"</span><span style=\"color:#CCCAC2\">)</span><span style=\"color:#CCCAC2B3\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">const</span><span style=\"color:#CCCAC2\"> circles </span><span style=\"color:#F29E74\">=</span><span style=\"color:#CCCAC2\"> d3</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">selectAll</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"circle\"</span><span style=\"color:#CCCAC2\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">data</span><span style=\"color:#CCCAC2\">(myData)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">enter</span><span style=\"color:#CCCAC2\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">append</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"circle\"</span><span style=\"color:#CCCAC2\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">attr</span><span style=\"color:#CCCAC2\">((</span><span style=\"color:#DFBFFF\">d</span><span style=\"color:#CCCAC2\">) </span><span style=\"color:#FFAD66\">=></span><span style=\"color:#CCCAC2\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">    return</span><span style=\"color:#CCCAC2\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      r</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">radius</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      cx</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">x</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      cy</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">y</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">    }</span><span style=\"color:#CCCAC2B3\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">  })</span><span style=\"color:#CCCAC2B3\">;</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"const svg = d3.select(&#x22;svg&#x22;);\nconst circles = d3\n  .selectAll(&#x22;circle&#x22;)\n  .data(myData)\n  .enter()\n  .append(&#x22;circle&#x22;)\n  .attr((d) => {\n    return {\n      r: d.radius,\n      cx: d.x,\n      cy: d.y,\n    };\n  });\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">But now with Vue, I just use the HTML declarations in the template like - because of the built-in reactivity, when the data changes the DOM elements are updated. No need for the old D3 select, enter, append pattern.</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"html\" data-theme=\"\"><code data-language=\"html\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;</span><span style=\"color:#5CCFE6\">svg</span><span style=\"color:#5CCFE680\">></span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">  &#x3C;</span><span style=\"color:#5CCFE6\">circle</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    v-for</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle in myData\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :r</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.radius\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :cx</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.x\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :cy</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.y\"</span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">  /></span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;/</span><span style=\"color:#5CCFE6\">svg</span><span style=\"color:#5CCFE680\">></span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"<svg>\n  <circle\n    v-for=&#x22;circle in myData&#x22;\n    :r=&#x22;circle.radius&#x22;\n    :cx=&#x22;circle.x&#x22;\n    :cy=&#x22;circle.y&#x22;\n  />\n</svg>\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I still use a ton of D3 functions though, <a href=\"https://github.com/topojson/topojson-client\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">topojson-client</a>, all the D3 number and color scales, force layouts, etc.</p>\n<h4 class=\"\" id=\"animating-enteringexiting\">Animating entering/exiting</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I want to fade elements in and out like you would do with <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">d3.select(selection).enter().transition(t).style(‘opacity’, 1)</code> I’ve been using <a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">animate.css</a> in combination with <a href=\"https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Vue’s custom transition classes</a>. So I’ll do something like</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"html\" data-theme=\"\"><code data-language=\"html\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;</span><span style=\"color:#FF6666\">circle</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  v-for</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle in myData\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  enter-active-class</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"animated fadeIn\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  leave-active-class</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"animated fadeOut\"</span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">/></span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"<circle\n  v-for=&#x22;circle in myData&#x22;\n  enter-active-class=&#x22;animated fadeIn&#x22;\n  leave-active-class=&#x22;animated fadeOut&#x22;\n/>\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">It’s also easy enough to use this same pattern with custom-made CSS transitions or animations, but I don’t find myself doing that too often.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"database-and-user-authentication\">Database and user authentication</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Over the past 3 months or so, I’ve fallen head over heels for the combination of Vue and Firestore via the <a href=\"https://www.npmjs.com/package/vue-firestore\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">vue-firestore</a> Vue binding. You set up your Firebase app, plug in all your auth keys, and then bind data objects to firestore collections. This binding is instantaneous and reactive, so if your Vue template references an object that is bound to a collection, the page automatically updates if an item is added, removed, or changed in firestore. You don’t have to do anything different. It feels like magic.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">So far for me Vue + Firestore has been fast, easy, and scalable. It reminds me of working with Meteor.js way back when.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"deploying\">Deploying</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I’ve been really enjoying using Netlify, and the Netlify CLI makes things even easier and faster. Once I’m ready to show someone what I’ve been working on, I just do <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">npm run build; netlify deploy —dir=dist</code> and the CLI walks me through creating a URL.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I end up working on a project for a few days, I’ll go ahead and set up <a href=\"https://www.netlify.com/docs/continuous-deployment/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Netlify’s continuous deployment</a> with a GitHub repo so that every time I push to master netlify automatically re-builds production from the latest commit.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">It doesn’t happen that often, but if I want to go even further, it is super easy to just buy a domain name from <a href=\"https://namecheap.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Namecheap</a> and point it at the Netlify DNS servers. Netlify delivers websites incredibly fast, especially <a href=\"https://nuxtjs.org/faq/netlify-deployment/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">combined with Nuxt</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I need to host really big files that I don’t want to put into a git repo, I’ll put them on S3 and reference the uploaded URLs in the project. I’ve also been experimenting with using <a href=\"https://cloudinary.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Cloudinary</a> for hosting my images.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">From start to finish, I can do everything described in this guide in about 30 minutes.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The lack of friction with this workflow causes me to try and start new things more often. This is really important to me right now as I experiment with different technologies and approaches. I have definitely had ideas and hesitated to start giving them a try because I knew I would need to spin up a new project, set up my IDE, etc. Code that exists is better than a good idea. I’d rather have a dozen half-built prototypes than a hundred good ideas.</p>",
  "html": "<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I’ve been really enjoying using Vue as a framework for my javascript applications. It allows me to quickly and easily lay out my data structure, some DOM-elements that are controlled by data, and handle any interactions / application state stuff I might need.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">In years past, my development workflow usually started with me cloning my <a href=\"https://github.com/ejfox/starter\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">@ejfox/starter</a> project, which has gulp, webpack, and a handful of other useful frameworks for making things quickly already set up.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Now, since it’s upgrade to 3.0, I pretty much exclusively use</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">> vue create project-name</code> which gives you a little CLI wizard to create a new Vue project. Importantly, you can manually select the features you want and create your own project defaults.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Mine, for example, automatically pulls in the Router, Vuex, Linter, and Stylus.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I <a href=\"https://www.youtube.com/watch?v=Q6e4pQccMH4\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">recorded a video of myself spinning up a prototype</a> of a D3 force layout using the techniques I describe below, it’s around 90 minutes but you can tell YouTube to play it double-speed and click around - if you’re curious.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"pulling-in-data\">Pulling in data</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">In my old starter project, I would pull in data with <a href=\"https://github.com/ejfox/starter/blob/master/src/coffee/app.coffee#L19\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">d3.queue</a> which was super easy and very little code.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">With Vue as my default framework, I’ve moved over to using the <a href=\"https://vuejs.org/v2/cookbook/using-axios-to-consume-apis.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">pattern of using axios to update objects in the component’s data</a> which is also super easy and very little code. Check out <a href=\"https://github.com/ejfox/website/blob/master/pages/vibes.vue#L42\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">this super-simple example of axios+vue</a> which powers <a href=\"https://ejfox.com/vibes\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">ejfox.com/vibes</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">When I’m pulling data from an API, it’s as simple as setting up the keys, building the API call, looking at the returned data in the Vue Chrome Devtools Inspector, and then building out the DOM elements with Vue’s <a href=\"https://vuejs.org/v2/guide/list.html\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">v-if and v-for</a> directives.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"combining-vue-and-d3-for-dataviz\">Combining Vue and D3 for dataviz</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Part of the reason that I really like using Vue is that it meshes with my understanding of D3, which I use to create a majority of my data visualization work both personally and professionally.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Vue makes it so that we no longer need our old, trusty friend <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">d3.select().enter().append().exit()</code> to bind data to various DOM elements, since Vue is doing it for us.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Before Vue, I would have an SVG already on the page and do something like</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"js\" data-theme=\"\"><code data-language=\"js\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FFAD66\">const</span><span style=\"color:#CCCAC2\"> svg </span><span style=\"color:#F29E74\">=</span><span style=\"color:#CCCAC2\"> d3</span><span style=\"color:#F29E74\">.</span><span style=\"color:#FFD173\">select</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"svg\"</span><span style=\"color:#CCCAC2\">)</span><span style=\"color:#CCCAC2B3\">;</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">const</span><span style=\"color:#CCCAC2\"> circles </span><span style=\"color:#F29E74\">=</span><span style=\"color:#CCCAC2\"> d3</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">selectAll</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"circle\"</span><span style=\"color:#CCCAC2\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">data</span><span style=\"color:#CCCAC2\">(myData)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">enter</span><span style=\"color:#CCCAC2\">()</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">append</span><span style=\"color:#CCCAC2\">(</span><span style=\"color:#D5FF80\">\"circle\"</span><span style=\"color:#CCCAC2\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F29E74\">  .</span><span style=\"color:#FFD173\">attr</span><span style=\"color:#CCCAC2\">((</span><span style=\"color:#DFBFFF\">d</span><span style=\"color:#CCCAC2\">) </span><span style=\"color:#FFAD66\">=></span><span style=\"color:#CCCAC2\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">    return</span><span style=\"color:#CCCAC2\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      r</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">radius</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      cx</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">x</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">      cy</span><span style=\"color:#CCCAC2B3\">:</span><span style=\"color:#CCCAC2\"> d</span><span style=\"color:#F29E74\">.</span><span style=\"color:#CCCAC2\">y</span><span style=\"color:#CCCAC2B3\">,</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">    }</span><span style=\"color:#CCCAC2B3\">;</span></span>\n<span data-line=\"\"><span style=\"color:#CCCAC2\">  })</span><span style=\"color:#CCCAC2B3\">;</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"const svg = d3.select(&#x22;svg&#x22;);\nconst circles = d3\n  .selectAll(&#x22;circle&#x22;)\n  .data(myData)\n  .enter()\n  .append(&#x22;circle&#x22;)\n  .attr((d) => {\n    return {\n      r: d.radius,\n      cx: d.x,\n      cy: d.y,\n    };\n  });\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">But now with Vue, I just use the HTML declarations in the template like - because of the built-in reactivity, when the data changes the DOM elements are updated. No need for the old D3 select, enter, append pattern.</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"html\" data-theme=\"\"><code data-language=\"html\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;</span><span style=\"color:#5CCFE6\">svg</span><span style=\"color:#5CCFE680\">></span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">  &#x3C;</span><span style=\"color:#5CCFE6\">circle</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    v-for</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle in myData\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :r</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.radius\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :cx</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.x\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">    :cy</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle.y\"</span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">  /></span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;/</span><span style=\"color:#5CCFE6\">svg</span><span style=\"color:#5CCFE680\">></span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"<svg>\n  <circle\n    v-for=&#x22;circle in myData&#x22;\n    :r=&#x22;circle.radius&#x22;\n    :cx=&#x22;circle.x&#x22;\n    :cy=&#x22;circle.y&#x22;\n  />\n</svg>\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I still use a ton of D3 functions though, <a href=\"https://github.com/topojson/topojson-client\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">topojson-client</a>, all the D3 number and color scales, force layouts, etc.</p>\n<h4 class=\"\" id=\"animating-enteringexiting\">Animating entering/exiting</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I want to fade elements in and out like you would do with <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">d3.select(selection).enter().transition(t).style(‘opacity’, 1)</code> I’ve been using <a href=\"https://daneden.github.io/animate.css/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">animate.css</a> in combination with <a href=\"https://vuejs.org/v2/guide/transitions.html#Custom-Transition-Classes\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Vue’s custom transition classes</a>. So I’ll do something like</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"html\" data-theme=\"\"><code data-language=\"html\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#5CCFE680\">&#x3C;</span><span style=\"color:#FF6666\">circle</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  v-for</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"circle in myData\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  enter-active-class</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"animated fadeIn\"</span></span>\n<span data-line=\"\"><span style=\"color:#FFD173\">  leave-active-class</span><span style=\"color:#CCCAC2B3\">=</span><span style=\"color:#D5FF80\">\"animated fadeOut\"</span></span>\n<span data-line=\"\"><span style=\"color:#5CCFE680\">/></span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"<circle\n  v-for=&#x22;circle in myData&#x22;\n  enter-active-class=&#x22;animated fadeIn&#x22;\n  leave-active-class=&#x22;animated fadeOut&#x22;\n/>\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">It’s also easy enough to use this same pattern with custom-made CSS transitions or animations, but I don’t find myself doing that too often.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"database-and-user-authentication\">Database and user authentication</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Over the past 3 months or so, I’ve fallen head over heels for the combination of Vue and Firestore via the <a href=\"https://www.npmjs.com/package/vue-firestore\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">vue-firestore</a> Vue binding. You set up your Firebase app, plug in all your auth keys, and then bind data objects to firestore collections. This binding is instantaneous and reactive, so if your Vue template references an object that is bound to a collection, the page automatically updates if an item is added, removed, or changed in firestore. You don’t have to do anything different. It feels like magic.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">So far for me Vue + Firestore has been fast, easy, and scalable. It reminds me of working with Meteor.js way back when.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"deploying\">Deploying</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I’ve been really enjoying using Netlify, and the Netlify CLI makes things even easier and faster. Once I’m ready to show someone what I’ve been working on, I just do <code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\">npm run build; netlify deploy —dir=dist</code> and the CLI walks me through creating a URL.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I end up working on a project for a few days, I’ll go ahead and set up <a href=\"https://www.netlify.com/docs/continuous-deployment/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Netlify’s continuous deployment</a> with a GitHub repo so that every time I push to master netlify automatically re-builds production from the latest commit.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">It doesn’t happen that often, but if I want to go even further, it is super easy to just buy a domain name from <a href=\"https://namecheap.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Namecheap</a> and point it at the Netlify DNS servers. Netlify delivers websites incredibly fast, especially <a href=\"https://nuxtjs.org/faq/netlify-deployment/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">combined with Nuxt</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">If I need to host really big files that I don’t want to put into a git repo, I’ll put them on S3 and reference the uploaded URLs in the project. I’ve also been experimenting with using <a href=\"https://cloudinary.com/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Cloudinary</a> for hosting my images.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">From start to finish, I can do everything described in this guide in about 30 minutes.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The lack of friction with this workflow causes me to try and start new things more often. This is really important to me right now as I experiment with different technologies and approaches. I have definitely had ideas and hesitated to start giving them a try because I knew I would need to spin up a new project, set up my IDE, etc. Code that exists is better than a good idea. I’d rather have a dozen half-built prototypes than a hundred good ideas.</p>",
  "title": "How I prototype apps and dataviz quickly",
  "metadata": {
    "type": "words",
    "hidden": false,
    "inprogress": false,
    "date": "2019-03-20T01:25:22.000Z",
    "hidetimestamp": false,
    "modified": "2024-09-23T16:13:36.000Z",
    "tags": [
      "vue",
      "dataviz",
      "d3",
      "javascript",
      "webdesign"
    ],
    "words": 932,
    "images": 0,
    "links": 15,
    "codeBlocks": 3,
    "headers": {
      "h2": 1
    },
    "toc": [
      {
        "text": "How I prototype apps and dataviz quickly",
        "slug": "how-i-prototype-apps-and-dataviz-quickly",
        "level": "h2",
        "children": [
          {
            "text": "Pulling in data",
            "slug": "pulling-in-data",
            "level": "h3",
            "children": []
          },
          {
            "text": "Combining Vue and D3 for dataviz",
            "slug": "combining-vue-and-d3-for-dataviz",
            "level": "h3",
            "children": []
          },
          {
            "text": "Database and user authentication",
            "slug": "database-and-user-authentication",
            "level": "h3",
            "children": []
          },
          {
            "text": "Deploying",
            "slug": "deploying",
            "level": "h3",
            "children": []
          }
        ]
      }
    ],
    "sourcePath": "../../../../../code/website2/content/blog/2019/how-i-prototype-apps-and-dataviz-quickly-in-2019.md",
    "sourceDir": "/Users/ejfox/Library/Mobile Documents/iCloud~md~obsidian/Documents/ejfox/"
  }
}