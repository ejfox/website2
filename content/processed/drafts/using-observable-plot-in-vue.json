{
  "frontmatter": {
    "dek": "In which we use two javascript frameworks to quickly scale from prototype to functional tool",
    "inprogress": true,
    "date": "2022-12-15T15:18:53.000Z",
    "modified": "2024-09-20T04:23:41.000Z",
    "tags": [
      "dataviz",
      "howto",
      "vue"
    ],
    "hidden": true,
    "draft": true
  },
  "content": "## Using Observable Plot in Vue\n\n#dataviz #howto\n\n[Observable Plot](https://observablehq.com/@observablehq/plot) is an awesome tool for quickly sketching and exploring data. It is wonderful when paired with Vue, which can handle user interactions, routing, and state management that can be a bridge between a [[2022-prototyping-toolkit |prototype]] and a functional tool.\n\n>[Observable Plot](https://github.com/observablehq/plot) is a free, open-source JavaScript library to help you quickly visualize tabular data. It has a concise and (hopefully) memorable API to foster fluency — and plenty of examples to learn from and copy-paste.\n\n[From the Observable Plot page](https://observablehq.com/@observablehq/plot)\n\nPlot makes it very easy to try out lots of different visual forms without hand-building everything. Because of that, Observable and Plot are a crucial part of the exploratory process of beginning to become acquainted with a dataset and beginning to [interrogate a dataset](https://observablehq.com/@ejfox/data-interrogation-template)\n\n### Getting set up\n\n`npx nuxi init PROJECT-NAME` installs a blank [Nuxt 3](https://nuxt.com) project ready to go.\n\n#### Getting Observable Plot into Vue\n\n`yarn add @observablehq/plot` adds Plot to our project.\n\nThen, at the top of any component where we want to use Plot, we need to import it: `import * as Plot from '@observablehq/plot'`\n\n### Making a chart with Plot and rendering with Vue\n\nVue and Observable Plot live in slightly different worlds that we need to bridge a bit. When we change our data, we want our Plot to automatically re-render. When we resize our page, we also want our Plot to automatically re-render. We will need to handle some of that in the way we build and call our chart within Vue.\n\n#### Making a function to make the viz\n\n```js\nfunction makePlotLineGraph(city, targetContainerId) {\nconst chartPlot = Plot.plot({\n\twidth: 500,\n\theight: 500,\n\tstyle: {\n\t\tbackground: \"black\",\n\t\tcolor: \"white\"\n\t}\n})\n  \nreturn chartPlot\n}\n```\n\n#### Getting the data and rendering it\n\n#### Triggering chart updates when the data changes\n\nFirst we load the data using fetch:\n\n```js\nfetch('/cities.csv')\n.then((response) => response.text())\n.then((data) => {\n// Set all of the city data\ncities.value = csvParse(data);\n\n// Set the city data for the active city based on the prop\ncity.value = cities.value.find((city) => city.name === props.cityName);\n});\n```\n\nWe need a computed property that holds the HTML of the rendered Plot based on the data we just updated.\n\n```js\n// make a computed that gets the HTML for the chart\n\nconst chartHTML = computed(() => {\nif (city.value) {\n// If we have a city, make a chart\nreturn makePlotLineGraph(city.value, 'chart').outerHTML\n} else {\n// Otherwise, return an empty div\nreturn '<div></div>'\n}\n})\n```\n\nThen we render this computed HTML with a simple template\n\n```vue\n<div ref=\"chart\" id=\"chart\" v-html=\"chartHTML\"></div>\n```\n"
}