{
  "content": "<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The other day I was perusing Mastodon, as one does, and noticed a post from <a href=\"https://theintercept.com/staff/micah-lee/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">journalist</a> and <a href=\"https://hacksandleaks.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">author</a> Micah Lee <a href=\"https://micahflee.com/exploring-the-paramilitary-leaks/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">saying he was exploring</a> a 200GB dump from <a href=\"https://www.propublica.org/article/ap3-oath-keepers-militia-mole\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">American paramilitary groups.</a></p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png\" alt=\"Screenshot - 2025-03-05 12:11:34 - Screenshot 2025-03-05 at 12.11.19 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I hadn't heard of such a dump before, and immediately sent Micah an email offering to help with any dataviz.</p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png\" alt=\"\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<h2 class=\"prose-sm text-3xl font-semibold mb-4 mt-8 max-w-prose border-b border-zinc-200 dark:border-zinc-800 pb-2 md:pr-12 animate-on-scroll slide-from-left\" id=\"from-sqlite-to-parquet-processing-telegram-leaks-for-fast-web-visualization\">From SQLite to Parquet: Processing Telegram Leaks for Fast Web Visualization</h2>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">When working with large datasets like Telegram chat dumps, getting from raw data to meaningful visualization requires a few key steps. Recently, I've been working with the \"Paramilitary Leaks\" dataset, and I wanted to share my workflow for transforming this data into a format that's fast to query and visualize directly in the browser.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-challenge\">The Challenge</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Telegram leaks typically come as SQLite databases - great for structured storage but not ideal for web-based analysis. The challenge was to:</p>\n<ol class=\"prose-sm list-decimal list-outside ml-6 mb-4 space-y-2 max-w-prose\">\n<li class=\"prose-sm max-w-prose\">Extract the relevant data</li>\n<li class=\"prose-sm max-w-prose\">Convert it to a web-friendly format</li>\n<li class=\"prose-sm max-w-prose\">Make it quickly accessible for visualization</li>\n<li class=\"prose-sm max-w-prose\">Cache it for fast loading across browsers</li>\n</ol>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png\" alt=\"Screenshot - 2025-03-05 23:49:03 - Screenshot 2025-03-05 at 11.48.45 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-workflow\">The Workflow</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Here's the pipeline I developed:</p>\n<h4 class=\"\" id=\"step-1-export-from-sqlite-to-csv\">Step 1: Export from SQLite to CSV</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">First, I extract the messages table to a .csv using SQLite's command-line tool:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"bash\" data-theme=\"\"><code data-language=\"bash\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#73D0FF\">sqlite3</span><span style=\"color:#95E6CB\"> -header</span><span style=\"color:#95E6CB\"> -csv</span><span style=\"color:#D5FF80\"> output/telegram_chats.db</span><span style=\"color:#D5FF80\"> 'select * from messages;'</span><span style=\"color:#F29E74\"> ></span><span style=\"color:#D5FF80\"> output/telegram_chats.csv</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"sqlite3 -header -csv output/telegram_chats.db &#x27;select * from messages;&#x27; > output/telegram_chats.csv\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">This gives us a clean CSV file with all our message data, ready for the next transformation- we could also play around with something like <a href=\"https://github.com/wireservice/csvkit\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">csvkit</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg> or <a href=\"https://www.visidata.org\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">visitdata</a></p>\n<h4 class=\"\" id=\"step-2-convert-csv-to-parquet\">Step 2: Convert CSV to Parquet</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Parquet is a columnar storage format that's incredibly efficient for analytical queries and works brilliantly in browser environments. I use DuckDB (an in-process analytical database) to handle the conversion:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"bash\" data-theme=\"\"><code data-language=\"bash\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#73D0FF\">duckdb</span><span style=\"color:#95E6CB\"> -c</span><span style=\"color:#D5FF80\"> \"INSTALL parquet; LOAD parquet; CREATE TABLE temp AS SELECT * FROM read_csv('output/telegram_chats.csv'); COPY temp TO 'output/telegram_chats.r4.parquet' (FORMAT PARQUET, COMPRESSION 'SNAPPY');\"</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"duckdb -c &#x22;INSTALL parquet; LOAD parquet; CREATE TABLE temp AS SELECT * FROM read_csv(&#x27;output/telegram_chats.csv&#x27;); COPY temp TO &#x27;output/telegram_chats.r4.parquet&#x27; (FORMAT PARQUET, COMPRESSION &#x27;SNAPPY&#x27;);&#x22;\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The compression with Snappy ensures it's both compact and fast to decompress.</p>\n<h4 class=\"\" id=\"step-3-host-on-r2-with-cloudflare-caching\">Step 3: Host on R2 with Cloudflare Caching</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">To make the data available globally with minimal latency (and cost to me) we throw it on Cloudflare R2 for hosting</p>\n<pre class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\"><code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\"># R2 Configuration\nR2_PARQUET_URL=https://r2.ejfox.com/para-leaks/telegram_chats.r5.parquet\n</code></pre>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-frontend\">The Frontend</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I've developed a Nuxt / <a href=\"https://github.com/flekschas/regl-scatterplot\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">regl-scatterplot</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg> frontend application to interact with this data, available on GitHub:</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><a href=\"https://github.com/ejfox/paramilitary-leaks-frontend\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">https://github.com/ejfox/paramilitary-leaks-frontend</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg></p>\n<div class=\"video-container\"> <video controls class=\"\"> <source src=\"https://res.cloudinary.com/ejf/video/upload/v1741568702/text-search.mp4\" type=\"video/mp4\" class=\"\"> Your browser does not support the video tag. </video> </div>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">You can view it the front-end <a href=\"https://para-leaks.ejfox.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">https://para-leaks.ejfox.com</a></p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"data-exploration-examples\">Data Exploration Examples</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Now that we've chopped and screwed our data between sqlite, parquet, and .csv – depending on what application we want to use it for, we can start asking interesting questions from the sqlite database with <a href=\"https://datasette.io\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">datasette</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">For example, to find the top senders of media you could run:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"sql\" data-theme=\"\"><code data-language=\"sql\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FFAD66\">select</span><span style=\"color:#CCCAC2\"> id, </span><span style=\"color:#FFAD66\">timestamp</span><span style=\"color:#CCCAC2\">, sender, </span><span style=\"color:#FFAD66\">text</span><span style=\"color:#CCCAC2\">, media_note, media_filename, </span><span style=\"color:#FFAD66\">filename</span><span style=\"color:#CCCAC2\">, group_chat_id </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">from</span><span style=\"color:#CCCAC2\"> messages </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">where</span><span style=\"color:#D5FF80\"> \"media_filename\"</span><span style=\"color:#FFAD66\"> is not null</span><span style=\"color:#CCCAC2\"> </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">order by</span><span style=\"color:#CCCAC2\"> media_filename </span><span style=\"color:#FFAD66\">desc</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">limit</span><span style=\"color:#DFBFFF\"> 101</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"select id, timestamp, sender, text, media_note, media_filename, filename, group_chat_id \nfrom messages \nwhere &#x22;media_filename&#x22; is not null \norder by media_filename desc\nlimit 101\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png\" alt=\"Datasette query for top media senders\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Because so much information is in these media files, I took a stab at having Gemini write data transcriptions of each photo so they could be indexed for text search later.</p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png\" alt=\"Screenshot - 2025-03-07 15:06:40 - Screenshot 2025-03-07 at 3.06.14 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png\" alt=\"Screenshot - 2025-03-07 15:08:31 - Screenshot 2025-03-07 at 3.08.18 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">This experiment went pretty well, but I shelved it to come back to, there's enough to analyze here without involving LLMs and prompt engineering.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"building-custom-visualizations\">Building Custom Visualizations</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The real power of this approach is that we can build all sorts of different front-ends or visualizations on top of this data. The Parquet format is super-fast in the browser, making it ideal for interactive visualizations. We've taken a 200GB leak and turned it into something we can explore in the browser.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Some ideas I'm exploring:</p>\n<ul class=\"prose-sm list-disc list-outside ml-6 mb-4 space-y-2 max-w-prose\">\n<li class=\"prose-sm max-w-prose\">Timeline visualizations of message frequency</li>\n<li class=\"prose-sm max-w-prose\">Network graphs of user interactions</li>\n<li class=\"prose-sm max-w-prose\">Text analysis and keyword extraction</li>\n<li class=\"prose-sm max-w-prose\">Sentiment analysis over time</li>\n</ul>\n<svg class=\"mx-auto my-8 w-full max-w-prose\" height=\"1\">\n  <line x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\" stroke=\"currentColor\" stroke-width=\"1\" stroke-dasharray=\"2,4\" />\n</svg>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">For more information on this topic, I recommend reading Micah Lee's excellent article:</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><a href=\"https://micahflee.com/exploring-the-paramilitary-leaks/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Exploring the Paramilitary Leaks</a></p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">ProPublica: <a href=\"https://www.propublica.org/article/ap3-oath-keepers-militia-mole\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">The Militia and the Mole (Jan. 4, 2025)</a></p>",
  "html": "<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The other day I was perusing Mastodon, as one does, and noticed a post from <a href=\"https://theintercept.com/staff/micah-lee/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">journalist</a> and <a href=\"https://hacksandleaks.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">author</a> Micah Lee <a href=\"https://micahflee.com/exploring-the-paramilitary-leaks/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">saying he was exploring</a> a 200GB dump from <a href=\"https://www.propublica.org/article/ap3-oath-keepers-militia-mole\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">American paramilitary groups.</a></p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png\" alt=\"Screenshot - 2025-03-05 12:11:34 - Screenshot 2025-03-05 at 12.11.19 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741194693/Screenshot_2025-03-05_at_12.11.19_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I hadn't heard of such a dump before, and immediately sent Micah an email offering to help with any dataviz.</p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png\" alt=\"\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741542940/Screenshot_2025-03-09_at_1.55.27_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<h2 class=\"prose-sm text-3xl font-semibold mb-4 mt-8 max-w-prose border-b border-zinc-200 dark:border-zinc-800 pb-2 md:pr-12 animate-on-scroll slide-from-left\" id=\"from-sqlite-to-parquet-processing-telegram-leaks-for-fast-web-visualization\">From SQLite to Parquet: Processing Telegram Leaks for Fast Web Visualization</h2>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">When working with large datasets like Telegram chat dumps, getting from raw data to meaningful visualization requires a few key steps. Recently, I've been working with the \"Paramilitary Leaks\" dataset, and I wanted to share my workflow for transforming this data into a format that's fast to query and visualize directly in the browser.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-challenge\">The Challenge</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Telegram leaks typically come as SQLite databases - great for structured storage but not ideal for web-based analysis. The challenge was to:</p>\n<ol class=\"prose-sm list-decimal list-outside ml-6 mb-4 space-y-2 max-w-prose\">\n<li class=\"prose-sm max-w-prose\">Extract the relevant data</li>\n<li class=\"prose-sm max-w-prose\">Convert it to a web-friendly format</li>\n<li class=\"prose-sm max-w-prose\">Make it quickly accessible for visualization</li>\n<li class=\"prose-sm max-w-prose\">Cache it for fast loading across browsers</li>\n</ol>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png\" alt=\"Screenshot - 2025-03-05 23:49:03 - Screenshot 2025-03-05 at 11.48.45 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741236542/Screenshot_2025-03-05_at_11.48.45_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-workflow\">The Workflow</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Here's the pipeline I developed:</p>\n<h4 class=\"\" id=\"step-1-export-from-sqlite-to-csv\">Step 1: Export from SQLite to CSV</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">First, I extract the messages table to a .csv using SQLite's command-line tool:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"bash\" data-theme=\"\"><code data-language=\"bash\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#73D0FF\">sqlite3</span><span style=\"color:#95E6CB\"> -header</span><span style=\"color:#95E6CB\"> -csv</span><span style=\"color:#D5FF80\"> output/telegram_chats.db</span><span style=\"color:#D5FF80\"> 'select * from messages;'</span><span style=\"color:#F29E74\"> ></span><span style=\"color:#D5FF80\"> output/telegram_chats.csv</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"sqlite3 -header -csv output/telegram_chats.db &#x27;select * from messages;&#x27; > output/telegram_chats.csv\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">This gives us a clean CSV file with all our message data, ready for the next transformation- we could also play around with something like <a href=\"https://github.com/wireservice/csvkit\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">csvkit</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg> or <a href=\"https://www.visidata.org\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">visitdata</a></p>\n<h4 class=\"\" id=\"step-2-convert-csv-to-parquet\">Step 2: Convert CSV to Parquet</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Parquet is a columnar storage format that's incredibly efficient for analytical queries and works brilliantly in browser environments. I use DuckDB (an in-process analytical database) to handle the conversion:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"bash\" data-theme=\"\"><code data-language=\"bash\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#73D0FF\">duckdb</span><span style=\"color:#95E6CB\"> -c</span><span style=\"color:#D5FF80\"> \"INSTALL parquet; LOAD parquet; CREATE TABLE temp AS SELECT * FROM read_csv('output/telegram_chats.csv'); COPY temp TO 'output/telegram_chats.r4.parquet' (FORMAT PARQUET, COMPRESSION 'SNAPPY');\"</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"duckdb -c &#x22;INSTALL parquet; LOAD parquet; CREATE TABLE temp AS SELECT * FROM read_csv(&#x27;output/telegram_chats.csv&#x27;); COPY temp TO &#x27;output/telegram_chats.r4.parquet&#x27; (FORMAT PARQUET, COMPRESSION &#x27;SNAPPY&#x27;);&#x22;\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The compression with Snappy ensures it's both compact and fast to decompress.</p>\n<h4 class=\"\" id=\"step-3-host-on-r2-with-cloudflare-caching\">Step 3: Host on R2 with Cloudflare Caching</h4>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">To make the data available globally with minimal latency (and cost to me) we throw it on Cloudflare R2 for hosting</p>\n<pre class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\"><code class=\"prose-sm font-mono text-sm bg-zinc-100 dark:bg-zinc-800 rounded px-1.5 py-0.5\"># R2 Configuration\nR2_PARQUET_URL=https://r2.ejfox.com/para-leaks/telegram_chats.r5.parquet\n</code></pre>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"the-frontend\">The Frontend</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">I've developed a Nuxt / <a href=\"https://github.com/flekschas/regl-scatterplot\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">regl-scatterplot</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg> frontend application to interact with this data, available on GitHub:</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><a href=\"https://github.com/ejfox/paramilitary-leaks-frontend\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">https://github.com/ejfox/paramilitary-leaks-frontend</a><svg class=\"inline-block w-4 h-4 ml-1 opacity-50 dark:opacity-75 group-hover:opacity-100 transition-opacity\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\"><path fill=\"currentColor\" d=\"M12 .297c-6.63 0-12 5.373-12 12c0 5.303 3.438 9.8 8.205 11.385c.6.113.82-.258.82-.577c0-.285-.01-1.04-.015-2.04c-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729c1.205.084 1.838 1.236 1.838 1.236c1.07 1.835 2.809 1.305 3.495.998c.108-.776.417-1.305.76-1.605c-2.665-.3-5.466-1.332-5.466-5.93c0-1.31.465-2.38 1.235-3.22c-.135-.303-.54-1.523.105-3.176c0 0 1.005-.322 3.3 1.23c.96-.267 1.98-.399 3-.405c1.02.006 2.04.138 3 .405c2.28-1.552 3.285-1.23 3.285-1.23c.645 1.653.24 2.873.12 3.176c.765.84 1.23 1.91 1.23 3.22c0 4.61-2.805 5.625-5.475 5.92c.42.36.81 1.096.81 2.22c0 1.606-.015 2.896-.015 3.286c0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\" class=\"\"></path></svg></p>\n<div class=\"video-container\"> <video controls class=\"\"> <source src=\"https://res.cloudinary.com/ejf/video/upload/v1741568702/text-search.mp4\" type=\"video/mp4\" class=\"\"> Your browser does not support the video tag. </video> </div>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">You can view it the front-end <a href=\"https://para-leaks.ejfox.com\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">https://para-leaks.ejfox.com</a></p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"data-exploration-examples\">Data Exploration Examples</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Now that we've chopped and screwed our data between sqlite, parquet, and .csv – depending on what application we want to use it for, we can start asking interesting questions from the sqlite database with <a href=\"https://datasette.io\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">datasette</a>.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">For example, to find the top senders of media you could run:</p>\n<figure class=\"prose-sm relative rounded-lg overflow-hidden shadow-sm\" data-rehype-pretty-code-figure=\"\"><pre style=\"background-color:#09090b;color:#cccac2\" tabindex=\"0\" data-language=\"sql\" data-theme=\"\"><code data-language=\"sql\" data-theme=\"\" style=\"display: grid;\"><span data-line=\"\"><span style=\"color:#FFAD66\">select</span><span style=\"color:#CCCAC2\"> id, </span><span style=\"color:#FFAD66\">timestamp</span><span style=\"color:#CCCAC2\">, sender, </span><span style=\"color:#FFAD66\">text</span><span style=\"color:#CCCAC2\">, media_note, media_filename, </span><span style=\"color:#FFAD66\">filename</span><span style=\"color:#CCCAC2\">, group_chat_id </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">from</span><span style=\"color:#CCCAC2\"> messages </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">where</span><span style=\"color:#D5FF80\"> \"media_filename\"</span><span style=\"color:#FFAD66\"> is not null</span><span style=\"color:#CCCAC2\"> </span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">order by</span><span style=\"color:#CCCAC2\"> media_filename </span><span style=\"color:#FFAD66\">desc</span></span>\n<span data-line=\"\"><span style=\"color:#FFAD66\">limit</span><span style=\"color:#DFBFFF\"> 101</span></span><button type=\"button\" title=\"Copy code\" aria-label=\"Copy code\" data=\"select id, timestamp, sender, text, media_note, media_filename, filename, group_chat_id \nfrom messages \nwhere &#x22;media_filename&#x22; is not null \norder by media_filename desc\nlimit 101\" class=\"rehype-pretty-copy\" onclick=\"navigator.clipboard.writeText(this.attributes.data.value);this.classList.add(&#x27;rehype-pretty-copied&#x27;);window.setTimeout(() => this.classList.remove(&#x27;rehype-pretty-copied&#x27;), 3000);\"><span class=\"ready\"></span><span class=\"success\"></span></button><style>:root {--copy-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 48 48'%3E%3Cpath fill='%23adadad' d='M16.187 9.5H12.25a1.75 1.75 0 0 0-1.75 1.75v28.5c0 .967.784 1.75 1.75 1.75h23.5a1.75 1.75 0 0 0 1.75-1.75v-28.5a1.75 1.75 0 0 0-1.75-1.75h-3.937a4.25 4.25 0 0 1-4.063 3h-7.5a4.25 4.25 0 0 1-4.063-3M31.813 7h3.937A4.25 4.25 0 0 1 40 11.25v28.5A4.25 4.25 0 0 1 35.75 44h-23.5A4.25 4.25 0 0 1 8 39.75v-28.5A4.25 4.25 0 0 1 12.25 7h3.937a4.25 4.25 0 0 1 4.063-3h7.5a4.25 4.25 0 0 1 4.063 3M18.5 8.25c0 .966.784 1.75 1.75 1.75h7.5a1.75 1.75 0 1 0 0-3.5h-7.5a1.75 1.75 0 0 0-1.75 1.75'/%3E%3C/svg%3E\");--success-icon: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%2366ff85' d='M9 16.17L5.53 12.7a.996.996 0 1 0-1.41 1.41l4.18 4.18c.39.39 1.02.39 1.41 0L20.29 7.71a.996.996 0 1 0-1.41-1.41z'/%3E%3C/svg%3E\");}pre:has(code) {position: relative;}pre button.rehype-pretty-copy {right: 1px;padding: 0;width: 24px;height: 24px;display: flex;margin-top: 2px;margin-right: 8px;position: absolute;border-radius: 25%;backdrop-filter: blur(3px);& span {width: 100%;aspect-ratio: 1 / 1;}& .ready {background-image: var(--copy-icon);}& .success {display: none; background-image: var(--success-icon);}}&.rehype-pretty-copied {& .success {display: block;} & .ready {display: none;}}pre button.rehype-pretty-copy.rehype-pretty-copied {opacity: 1;& .ready { display: none; }& .success { display: block; }}</style></code></pre></figure>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png\" alt=\"Datasette query for top media senders\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741547576/Screenshot_2025-03-09_at_3.12.44_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Because so much information is in these media files, I took a stab at having Gemini write data transcriptions of each photo so they could be indexed for text search later.</p>\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png\" alt=\"Screenshot - 2025-03-07 15:06:40 - Screenshot 2025-03-07 at 3.06.14 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741377995/Screenshot_2025-03-07_at_3.06.14_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<img src=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png\" alt=\"Screenshot - 2025-03-07 15:08:31 - Screenshot 2025-03-07 at 3.08.18 PM.png\" srcset=\"http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_400/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 400w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_800/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 800w,\n      http://res.cloudinary.com/ejf/image/upload/c_scale,f_auto,q_auto:good,w_1200/v1741378110/Screenshot_2025-03-07_at_3.08.18_PM.png 1200w\" sizes=\"(min-width: 768px) 80vw, 100vw\" loading=\"lazy\" decoding=\"async\" class=\"w-full max-w-full mx-auto w-full max-w-full mx-auto transition-all duration-300 ease-in-out pr-2 py-2 md:pr-6 md:py-4 lg:pr-12 lg:py-6 animate-on-scroll slide-from-bottom will-change-transform\">\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">This experiment went pretty well, but I shelved it to come back to, there's enough to analyze here without involving LLMs and prompt engineering.</p>\n<h3 class=\"prose-sm text-2xl font-medium mb-3 mt-6 max-w-prose md:pr-12 animate-on-scroll slide-from-left\" id=\"building-custom-visualizations\">Building Custom Visualizations</h3>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">The real power of this approach is that we can build all sorts of different front-ends or visualizations on top of this data. The Parquet format is super-fast in the browser, making it ideal for interactive visualizations. We've taken a 200GB leak and turned it into something we can explore in the browser.</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">Some ideas I'm exploring:</p>\n<ul class=\"prose-sm list-disc list-outside ml-6 mb-4 space-y-2 max-w-prose\">\n<li class=\"prose-sm max-w-prose\">Timeline visualizations of message frequency</li>\n<li class=\"prose-sm max-w-prose\">Network graphs of user interactions</li>\n<li class=\"prose-sm max-w-prose\">Text analysis and keyword extraction</li>\n<li class=\"prose-sm max-w-prose\">Sentiment analysis over time</li>\n</ul>\n<svg class=\"mx-auto my-8 w-full max-w-prose\" height=\"1\">\n  <line x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\" stroke=\"currentColor\" stroke-width=\"1\" stroke-dasharray=\"2,4\" />\n</svg>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">For more information on this topic, I recommend reading Micah Lee's excellent article:</p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\"><a href=\"https://micahflee.com/exploring-the-paramilitary-leaks/\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">Exploring the Paramilitary Leaks</a></p>\n<p class=\"prose-p prose-sm max-w-prose mb-4 leading-relaxed dark:prose-invert animate-on-scroll\" style=\"max-width: 60ch;\">ProPublica: <a href=\"https://www.propublica.org/article/ap3-oath-keepers-militia-mole\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"external-link group prose-sm text-blue-600 dark:text-blue-400 hover:underline transition-colors duration-200\">The Militia and the Mole (Jan. 4, 2025)</a></p>",
  "title": "Processing Telegram Leaks for Fast Web Visualization",
  "metadata": {
    "date": "2025-03-09T17:49:01.000Z",
    "modified": "2025-03-10T01:16:48.000Z",
    "title": "Processing Telegram Leaks for Fast Web Visualization",
    "dek": "In which I describe my workflow for transforming a Telegram database dump into a web-friendly format for analysis and visualization",
    "inprogress": true,
    "tags": [
      "data",
      "dataviz",
      "journalism",
      "politics"
    ],
    "words": 688,
    "images": 6,
    "links": 17,
    "codeBlocks": 4,
    "headers": {
      "h2": 2
    },
    "toc": [
      {
        "text": "Paramilitary Telegram Leaks: From Dump To Data",
        "slug": "paramilitary-telegram-leaks-from-dump-to-data",
        "level": "h2",
        "children": []
      },
      {
        "text": "From SQLite to Parquet: Processing Telegram Leaks for Fast Web Visualization",
        "slug": "from-sqlite-to-parquet-processing-telegram-leaks-for-fast-web-visualization",
        "level": "h2",
        "children": [
          {
            "text": "The Challenge",
            "slug": "the-challenge",
            "level": "h3",
            "children": []
          },
          {
            "text": "The Workflow",
            "slug": "the-workflow",
            "level": "h3",
            "children": []
          },
          {
            "text": "The Frontend",
            "slug": "the-frontend",
            "level": "h3",
            "children": []
          },
          {
            "text": "Data Exploration Examples",
            "slug": "data-exploration-examples",
            "level": "h3",
            "children": []
          },
          {
            "text": "Building Custom Visualizations",
            "slug": "building-custom-visualizations",
            "level": "h3",
            "children": []
          }
        ]
      }
    ],
    "type": "post",
    "sourcePath": "../../../../../code/website2/content/blog/2025/paramilitary-telegram-leaks-001.md",
    "sourceDir": "/Users/ejfox/Library/Mobile Documents/iCloud~md~obsidian/Documents/ejfox/"
  }
}