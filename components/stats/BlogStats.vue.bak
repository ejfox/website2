<template>
  <div class="font-mono flex flex-col space-y-20">
    <!-- Primary Stats -->
    <div>
      <IndividualStat :value="stats.totalPosts" size="large" label="BLOG POSTS" :details="primaryDetails" />
    </div>

    <!-- Writing Velocity -->
    <div class="stat-section">
      <h3 class="section-subheader">WRITING VELOCITY</h3>

      <div class="stats-table">
        <div v-for="(item, index) in velocityStats" :key="index" class="stats-row">
          <div class="stats-label">{{ item.label }}</div>
          <div class="stats-value">{{ item.value }}</div>
        </div>
      </div>
    </div>

    <!-- Content Stats -->
    <div v-if="hasTagsData" class="stat-section">
      <h3 class="section-subheader">CONTENT</h3>

      <div class="stats-table">
        <div v-for="(item, index) in contentStats" :key="index" class="stats-row">
          <div class="stats-label">{{ item.label }}</div>
          <div class="stats-value">{{ item.value }}</div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { differenceInDays, differenceInYears, differenceInMonths } from 'date-fns'
import IndividualStat from './IndividualStat.vue'

interface BlogStats {
  totalPosts: number
  totalWords: number
  averageWords: number
  firstPost: string | null
  lastPost: string | null
  postsThisMonth?: number
  wordsThisMonth?: number
  topTags?: string[]
  uniqueTags?: number
  averageReadingTime?: number
}

interface StatItem {
  label: string
  value: string
  condition?: boolean
}

const props = defineProps<{
  stats: BlogStats
}>()

// Computed properties for conditional rendering and data formatting
const primaryDetails = computed(() => {
  return `${formatNumber(props.stats.totalWords)} WORDS Â· ${formatNumber(props.stats.averageWords)} AVG/POST`
})

const hasTagsData = computed(() => {
  return !!(props.stats.topTags?.length || props.stats.uniqueTags || props.stats.averageReadingTime)
})

const topTagsDisplay = computed(() => {
  if (!props.stats.topTags?.length) return ''
  return props.stats.topTags.slice(0, 3).join(', ')
})

// Velocity stats items
const velocityStats = computed<StatItem[]>(() => [
  { label: 'Active Period', value: writingSpan.value },
  { label: 'Annual Output', value: `~${postsPerYear.value} posts per year` },
  {
    label: 'Recent Activity',
    value: `${props.stats.postsThisMonth} posts this month`,
    condition: !!props.stats.postsThisMonth
  }
].filter(item => item.condition !== false))

// Content stats items
const contentStats = computed<StatItem[]>(() => [
  {
    label: 'Top Topics',
    value: topTagsDisplay.value,
    condition: !!props.stats.topTags?.length
  },
  {
    label: 'Topics Covered',
    value: `${props.stats.uniqueTags} unique tags`,
    condition: !!props.stats.uniqueTags
  },
  {
    label: 'Avg. Reading Time',
    value: `${props.stats.averageReadingTime} min`,
    condition: !!props.stats.averageReadingTime
  }
].filter(item => item.condition !== false))

// Formatting utilities
const formatNumber = (num: number): string => {
  return new Intl.NumberFormat().format(Math.round(num))
}

// Calculate writing span (e.g., "2 years, 3 months")
const writingSpan = computed(() => {
  if (!props.stats.firstPost || !props.stats.lastPost) return 'Unknown'

  const firstDate = new Date(props.stats.firstPost)
  const lastDate = new Date(props.stats.lastPost)
  const years = differenceInYears(lastDate, firstDate)
  const months = differenceInMonths(lastDate, firstDate) % 12

  if (years === 0) {
    return months === 0 ? 'Less than a month' : `${months} months`
  }
  return months === 0 ? `${years} years` : `${years} years, ${months} months`
})

// Calculate posts per year
const postsPerYear = computed(() => {
  if (!props.stats.firstPost || !props.stats.lastPost) return 0

  const firstDate = new Date(props.stats.firstPost)
  const lastDate = new Date(props.stats.lastPost)
  const years = differenceInDays(lastDate, firstDate) / 365
  return Number((props.stats.totalPosts / years).toFixed(1))
})
</script>

<style scoped>
.section-subheader {
  @apply text-xs tracking-[0.2em] text-zinc-500 border-b border-zinc-800/30 pb-1 mb-6;
}

.stats-table {
  @apply grid w-full gap-y-6;
}

.stats-row {
  @apply grid grid-cols-2 items-baseline py-1 border-b border-zinc-800/20;
}

.stats-label {
  @apply text-zinc-500 text-sm tracking-wider font-light;
}

.stats-value {
  @apply text-zinc-300 text-sm tabular-nums tracking-wider text-right font-normal;
}

.stat-section {
  @apply relative space-y-6;
}

.stat-section::before {
  @apply absolute -left-8 top-0 h-full w-px bg-gradient-to-b from-zinc-800/0 via-zinc-800/50 to-zinc-800/0 content-[''];
}
</style>